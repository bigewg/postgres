

#Подготовим терраформ для развертывании в яо
$Env:YC_TOKEN=$(yc iam create-token)
$Env:YC_CLOUD_ID=$(yc config get cloud-id)
$Env:YC_FOLDER_ID=$(yc config get folder-id)
terraform apply


#Ставим Postgresql
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' \
&& wget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /etc/apt/trusted.gpg.d/pgdg.asc &>/dev/null \
&& sudo apt update \
&& sudo apt install postgresql postgresql-client -y \
&& systemctl status postgresql

#Правим pg_hba и listen addreses

#Показываем утилиты htop iotop
#Генерим нагрузку

create database test;

pgbench -i test
pgbench -c 50 -C -j 2 -P 10 -T 60 -M extended test

#Настраиваем huge_pages
 
head -1 /var/lib/postgresql/15/main/postmaster.pid
grep ^VmPeak /proc/1804/status
grep ^Hugepagesize /proc/meminfo # Размер одной большой таблицы
820588/2048=400,67
sysctl -w vm.nr_hugepages=401
echo 'vm.nr_hugepages=401' >> /etc/sysctl.conf

#VmPeak — это максимальный объем памяти, который процесс использовал с момента запуска.

#Настраиваем swapiness
cat /proc/sys/vm/swappiness
echo 'vm.swappiness=5' >> /etc/sysctl.conf

#Показываем заббикс
Ставим заббикс по инструкции:
https://www.zabbix.com/download?zabbix=6.4&os_distribution=ubuntu&os_version=20.04&components=server_frontend_agent&db=pgsql&ws=nginx

wget https://repo.zabbix.com/zabbix/6.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.4-1+ubuntu20.04_all.deb \
&& apt update \
&& apt install zabbix-server-pgsql zabbix-frontend-php php7.4-pgsql zabbix-nginx-conf zabbix-sql-scripts zabbix-agent

sudo -u postgres createuser --pwprompt zabbix
sudo -u postgres createdb -O zabbix zabbix
zcat /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz | sudo -u zabbix psql zabbix

# Edit file /etc/zabbix/zabbix_server.conf

DBPassword=password

#Edit file /etc/zabbix/nginx.conf uncomment and set 'listen' and 'server_name' directives.

listen 8080;
server_name example.com;

systemctl restart zabbix-server zabbix-agent nginx php7.4-fpm

http://51.250.77.57:8080/

Конфигурируем заббикс

Ставим шаблон postgresql:
https://www.zabbix.com/integrations/postgresql#postgresql

CREATE USER zbx_monitor WITH PASSWORD 'zbx_monitor' INHERIT;
GRANT pg_monitor TO zbx_monitor;

mkdir /var/lib/zabbix
cp -r /home/konstantin/postgresql /var/lib/zabbix/
cp /home/konstantin/template_db_postgresql.conf /etc/zabbix/zabbix_agentd.d/

#Импортируем шаблон (или выбираем шаблон)

systemctl restart zabbix-agent.service

#Генерим нагрузку смотрим заббикс

#Генерим нагрузку

pgbench -c 50 -C -j 2 -P 10 -T 30 -M extended test


#Показываем 
pg_stat_activity

#Показываем 
pg_stat_statements

#астраиваем логирование для badger
log_line_prefix = '%t [%p]: [%l-1] '
log_statement = 'none'
log_min_duration_statement = 0
log_checkpoints = on
log_connections = on
log_disconnections = on
log_lock_waits = on
log_temp_files = 0
log_autovacuum_min_duration = 0
logging_collector = on

pgbench -c 50 -j 2 -P 10 -T 30 test
pgbench -c 50 -C -j 2 -P 10 -T 30 -M extended test

apt-get install pgbadger

pgbadger -a 1 /var/lib/postgresql/15/main/log/*.log -o /tmp/pgbadger.html
#Вариант со временем
pgbadger -a 1 /var/lib/pgsql/15/data/log/postgresql-Mon.log -o /tmp/pgbadger.html -b "2022-12-19 08:00:00" -e "2022-12-19 09:00:00"



alter user postgres with password 'postgres';
----1----
---pg_stat_activity----
select * from pg_stat_activity;

SELECT pid,
       now() - query_start as "runtime",
       usename,
       datname,
       wait_event_type,
       state,
       query
FROM pg_stat_activity
WHERE now() - query_start > '5 seconds'::interval and state='active'
ORDER BY runtime DESC;

select pg_terminate_backend(16163);

select *
from pg_stat_activity
where state='idle';

--pg_stat_statements
show shared_preload_libraries;
create extension if not exists pg_stat_statements;
select * from pg_stat_statements;
-- ТОП по загрузке CPU
SELECT substring(query, 1, 50) AS short_query,
round(total_exec_time::numeric, 2) AS total_time, calls, rows,
round(total_exec_time::numeric / calls, 2) AS avg_time,
round((100 * total_exec_time/ sum(total_exec_time::numeric) OVER ())::numeric, 2) AS percentage_cpu
FROM pg_stat_statements ORDER BY total_exec_time DESC LIMIT 20;

--ТОП по времени выполнения
SELECT substring(query, 1, 100) AS short_query,
round(total_exec_time::numeric, 2) AS total_time, calls, rows,
round(total_exec_time::numeric / calls, 2) AS avg_time,
round((100 * total_exec_time/ sum(total_exec_time::numeric) OVER ())::numeric, 2) AS percentage_cpu
FROM pg_stat_statements ORDER BY total_exec_time DESC LIMIT 20;


--pg_stat_user_tables
SELECT schemaname, relname, seq_scan, seq_tup_read,
seq_tup_read/ seq_scan AS avg, idx_scan
FROM pg_stat_all_tables WHERE seq_scan> 0
ORDER BY seq_tup_read DESC LIMIT 25;

--pg_stat_user_tables
select * from pg_statio_all_tables;

---2---
show track_activity_query_size;