можно так
root@patroni-node3:/tmp# apt install unzip
root@patroni-node3:/tmp# apt install make
root@patroni-node3:/tmp/haproxy_exporter-main# apt  install golang-go 

root@patroni-node3:/tmp# unzip haproxy_exporter-main.zip 
root@patroni-node3:/tmp# cd haproxy_exporter-main/
root@patroni-node3:/tmp/haproxy_exporter-main# make build

root@patroni-node3:/usr/local/bin# cp /tmp/haproxy_exporter-main/haproxy_exporter /usr/local/bin/

cat > /etc/systemd/system/haproxy_exporter.service
[Unit]
Description=Prometheus Haproxy Exporter
After=network.target

[Service]
Type=simple
Restart=always
User=postgres
Group=postgres
ExecStart=/usr/local/bin/haproxy_exporter --haproxy.scrape-uri="http://localhost:5000/stats;csv"
[Install]
WantedBy=multi-user.target


systemctl daemon-reload
systemctl start haproxy_exporter.service
systemctl enable haproxy_exporter.service
systemctl status haproxy_exporter.service

метрики можно смотреть на 
http://158.160.14.28:9101/metrics

а можно переделать сам haproxy
https://www.haproxy.com/blog/haproxy-exposes-a-prometheus-metrics-endpoint/

sudo apt update
sudo apt install -y git ca-certificates gcc libc6-dev liblua5.3-dev libpcre3-dev libssl-dev libsystemd-dev make wget zlib1g-dev
git clone https://github.com/haproxy/haproxy.git
cd haproxy
make TARGET=linux-glibc USE_LUA=1 USE_OPENSSL=1 USE_PCRE=1 USE_ZLIB=1 USE_SYSTEMD=1 USE_PROMEX=1
sudo make install-bin

sudo systemctl stop haproxy
sudo cp /usr/local/sbin/haproxy /usr/sbin/haproxy
sudo systemctl start haproxy

haproxy -vv
Built with the Prometheus exporter as a service

метрики можно смотреть на http://158.160.14.28:8404/metrics
исправить конфиг

global
     log 127.0.0.1   local2
     log /dev/log    local0
     log /dev/log    local1 notice
     chroot /var/lib/haproxy
     stats socket /var/lib/haproxy/stats
     stats timeout 30s
     user haproxy
     group haproxy
     maxconn 4000
     daemon

defaults
    mode                    tcp
    log                     global
    option                  tcplog
    retries                 3
    timeout queue           1m
    timeout connect         10s
    timeout client          30m
    timeout server          30m
    timeout check           10s
    maxconn                 3000

listen stats
  mode http
  bind *:8404
  http-request use-service prometheus-exporter if { path /metrics }
  stats enable
  stats uri /
  stats refresh 10s

listen primary_postgres_write
    bind *:5000
    option httpchk OPTIONS /master
    http-check expect status 200
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
    server pg_node1 10.129.0.24:5432 maxconn 300 check port 8008
    server pg_node2 10.129.0.10:5432 maxconn 300 check port 8008

listen standby_postgres_read
    bind *:5001
    balance leastconn
    option httpchk OPTIONS /replica
    http-check expect status 200
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
    server pg_node1 10.129.0.24:5432 maxconn 300 check port 8008
    server pg_node2 10.129.0.10:5432 maxconn 300 check port 8008

